<?php
declare(strict_types=1);

namespace Bold\CheckoutSelfHosted\Observer;

use Bold\Checkout\Api\Data\Http\Client\ResultInterface;
use Bold\Checkout\Api\Http\ClientInterface;
use Bold\Checkout\Model\ConfigInterface;
use Exception;
use Magento\Framework\Event\Observer;
use Magento\Framework\Event\ObserverInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Model\ResourceModel\UrlRewrite;
use Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollectionFactory;
use Magento\UrlRewrite\Model\UrlRewriteFactory;

/**
 * Create Bold Checkout Url Rewrites Observer.
 */
class CreateCheckoutUrlRewritesObserver implements ObserverInterface
{
    private const SHOP_INFO_URL = 'shops/v1/info';
    /**
     * @var ['request_path' => 'target_path']
     */
    private const PATHS = [
        'bold_platform/%s/experience/resume' => 'experience/index/index',
        'bold_platform/%s/experience/shipping_lines' => 'experience/index/index',
        'bold_platform/%s/experience/payment' => 'experience/index/index',
        'bold_platform/%s/experience/thank_you' => '/',
    ];

    /**
     * @var UrlRewriteFactory
     */
    protected $urlRewriteFactory;

    /**
     * @var UrlRewrite
     */
    private $urlRewriteResource;

    /**
     * @var ConfigInterface
     */
    private $config;

    /**
     * @var ClientInterface
     */
    private $client;

    /**
     * @var UrlRewriteCollectionFactory
     */
    private $urlRewriteCollectionFactory;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @param UrlRewriteFactory $urlRewriteFactory
     * @param UrlRewrite $urlRewriteResource
     * @param ConfigInterface $config
     * @param ClientInterface $client
     */
    public function __construct(
        UrlRewriteFactory $urlRewriteFactory,
        UrlRewrite $urlRewriteResource,
        UrlRewriteCollectionFactory $urlRewriteCollectionFactory,
        StoreManagerInterface $storeManager,
        ConfigInterface $config,
        ClientInterface $client
    ) {
        $this->urlRewriteFactory = $urlRewriteFactory;
        $this->urlRewriteResource = $urlRewriteResource;
        $this->config = $config;
        $this->client = $client;
        $this->urlRewriteCollectionFactory = $urlRewriteCollectionFactory;
        $this->storeManager = $storeManager;
    }

    /**
     * Create Bold Checkout Url Rewrites.
     *
     * @param Observer $observer
     * @return void
     * @throws Exception
     */
    public function execute(Observer $observer)
    {
        $event = $observer->getEvent();
        $websiteId = (int)$event->getWebsite() ?: (int)$this->storeManager->getWebsite(true)->getId();
        if (!$this->config->isCheckoutEnabled($websiteId)) {
            return;
        }
        $shopInfo = $this->client->get($websiteId, self::SHOP_INFO_URL);
        if ($shopInfo->getErrors()) {
            $error = current($shopInfo->getErrors());
            throw new Exception($error);
        }
        $storeId = (int)$this->storeManager->getWebsite($websiteId)->getDefaultStore()->getId();
        $requestPaths = $this->getPaths($shopInfo);
        $urlRewritesCollection = $this->urlRewriteCollectionFactory->create();
        $urlRewritesCollection->addFieldToFilter(
            'request_path',
            [
                'in' => \array_keys($requestPaths),
            ]
        );
        $urlRewritesCollection->addStoreFilter($storeId, false);
        foreach ($requestPaths as $requestPath => $targetPath) {
            foreach ($urlRewritesCollection as $existingUrlRewrite) {
                if ($existingUrlRewrite->getRequestPath() === $requestPath
                    && $existingUrlRewrite->getTargetPath() === $targetPath) {
                    continue 2;
                }
                if ($existingUrlRewrite->getRequestPath() === $requestPath
                    && $existingUrlRewrite->getTargetPath() !== $targetPath) {
                    $existingUrlRewrite->setTargetPath($targetPath);
                    $this->urlRewriteResource->save($existingUrlRewrite);
                    continue 2;
                }
            }
            $urlRewrite = $this->urlRewriteFactory->create();
            $urlRewrite->setStoreId($storeId);
            $urlRewrite->setRequestPath($requestPath);
            $urlRewrite->setTargetPath($targetPath);
            $urlRewrite->setIsAutoGenerated(1);
            $urlRewrite->setRedirectType(301);
            $urlRewrite->setEntityType('custom');
            $this->urlRewriteResource->save($urlRewrite);
        }
    }

    /**
     * Get formatted request paths.
     *
     * @param ResultInterface $shopInfo
     * @return array
     */
    private function getPaths(ResultInterface $shopInfo): array
    {
        $requestPaths = [];
        foreach (self::PATHS as $requestPath => $targetPath) {
            $requestPaths[\sprintf($requestPath, $shopInfo->getBody()['shop_domain'])] = $targetPath;
        }
        return $requestPaths;
    }
}
